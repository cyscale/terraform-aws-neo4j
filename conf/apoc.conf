apoc.uuid.enabled=true
apoc.uuid.refresh=10

apoc.import.file.use_neo4j_config=true
apoc.import.file.enabled=true
apoc.export.file.enabled=true

apoc.initializer.neo4j.0=CREATE CONSTRAINT asset_identifier IF NOT EXISTS FOR (n:Asset) REQUIRE n.identifier IS UNIQUE
apoc.initializer.neo4j.1=CREATE CONSTRAINT policy_entity_identifier IF NOT EXISTS FOR (n:PolicyEntity) REQUIRE n.identifier IS UNIQUE
apoc.initializer.neo4j.2=CREATE CONSTRAINT result_entity_identifier IF NOT EXISTS FOR (n:ResultEntity) REQUIRE n.identifier IS UNIQUE
apoc.initializer.neo4j.3=CREATE CONSTRAINT attribute_identifier IF NOT EXISTS FOR (a:Attribute) REQUIRE a.identifier IS UNIQUE
apoc.initializer.neo4j.4=CALL apoc.uuid.setup("Asset", "neo4j", {uuidProperty: "identifier", addToExistingNodes: false})
apoc.initializer.neo4j.5=CALL apoc.uuid.setup("PolicyEntity", "neo4j", {uuidProperty: "identifier", addToExistingNodes: false})
apoc.initializer.neo4j.6=CALL apoc.uuid.setup("ResultEntity", "neo4j", {uuidProperty: "identifier", addToExistingNodes: false})
apoc.initializer.neo4j.7=CALL apoc.uuid.setup("Attribute", "neo4j", {uuidProperty: "identifier", addToExistingNodes: false})
apoc.initializer.neo4j.8=CREATE FULLTEXT INDEX search_index IF NOT EXISTS FOR (n:Asset|PolicyEntity) ON EACH [n.idFromProvider, n.name, n.slug, n.internalName] OPTIONS {indexConfig: {`fulltext.eventually_consistent`: true}}
apoc.initializer.neo4j.9=CREATE INDEX iamPermission_name IF NOT EXISTS FOR (n:IAMPermission) ON (n.name)
apoc.initializer.neo4j.10=CREATE INDEX asset_idFromProvider IF NOT EXISTS FOR (n:Asset) ON (n.idFromProvider)
apoc.initializer.neo4j.11=CREATE INDEX control_slug IF NOT EXISTS FOR (c:Control) ON c.slug
apoc.initializer.neo4j.12=CREATE INDEX procedure_slug IF NOT EXISTS FOR (pr:Procedure) ON pr.slug
apoc.initializer.neo4j.13=CREATE INDEX awsAsset_package IF NOT EXISTS FOR (n:AWSAsset) ON (n.awsPackage)
apoc.initializer.neo4j.14=CREATE INDEX awsAsset_assetType IF NOT EXISTS FOR (n:AWSAsset) ON (n.awsAssetType)
