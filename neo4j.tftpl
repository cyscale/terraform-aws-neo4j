#!/bin/bash -x

## 0 - Wait 30 seconds before starting script execution
sleep 30

#ONLY USED FOR TESTING
#OVERRIDE_VERSION=5.2.0

## 1 - Variable Setting and Test
INSTALL_GDS=${install_gds}
INSTALL_BLOOM=${install_bloom}
GDS_KEY=${gds_key}
BLOOM_KEY=${bloom_key}
NEO4J_PASSWORD=${neo4j_password}
NODE_COUNT=${node_count}
LB_FQDN=${lb_fqdn}
NEO4J_VERSION=${neo4j_version}
TARGET_REGION=${target_region}
LB_ARN=${lb_arn}
THIS_INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
ENV_PREFIX=${env_prefix}

function aws_get_private_ips {
  aws ec2 describe-instances\
        --output=text\
        --region=$TARGET_REGION\
        --filters Name=tag:Terraform,Values=true\
        --filters Name=tag:Name,Values=$ENV_PREFIX-instance\
        --query "Reservations[].Instances[].PrivateIpAddress"
}

PRIVATE_IPS=$(aws_get_private_ips)

for ip in $PRIVATE_IPS ; do
  private_ip_array+=("$ip:5000,")
done

CORE_MEMBERS=$(echo $${private_ip_array[@]} | sed 's/,$//' | sed 's/ //g')

function existing_version_tag {
  aws elbv2 describe-tags\
    --resource-arns $LB_ARN\
    --region=$TARGET_REGION\
    --query 'TagDescriptions[*].Tags[?Key==`Neo4j_Built_Version`].Value'\
    --output=text
}

EXISTING_VERSION_TAG="$(existing_version_tag)"

## 2 - Install Neo4j using yum
echo " - [ Installing Graph Database ] - "
export NEO4J_ACCEPT_LICENSE_AGREEMENT=yes

if [[ ! -z $OVERRIDE_VERSION && $OVERRIDE_VERSION =~ ^[0-9]\.[0-9]\.[0-9]$ ]]; then
  echo " - [ Installing OVERRIDE_VERSION: $OVERRIDE_VERSION ] - "
  yum install -y neo4j-enterprise-$OVERRIDE_VERSION
  sleep 1
  aws elbv2 add-tags --resource-arns $LB_ARN --tags Key=Neo4j_Built_Version,Value=$(/usr/share/neo4j/bin/neo4j --version) --region=$TARGET_REGION
elif [[ $EXISTING_VERSION_TAG =~ ^[0-9]\.[0-9]\.[0-9]$ ]]; then
  echo " - [ Existing version tag already exists, building with version $EXISTING_VERSION_TAG to preserve cluster version ] - "
  yum install -y neo4j-enterprise-$EXISTING_VERSION_TAG

else  
  echo "No valid existing version set - assuming initial deployment"
  PACKAGE_VERSION=$(curl --fail http://versions.neo4j-templates.com/target.json | jq -r ".aws[\"$NEO4J_VERSION\"]" || echo "")
  if [[ ! -z $PACKAGE_VERSION && $PACKAGE_VERSION != "null" ]]; then
    echo " - [ Found PACKAGE_VERSION from http://versions.neo4j-templates.com : PACKAGE_VERSION=$PACKAGE_VERSION ] - "
    yum install -y neo4j-enterprise-$PACKAGE_VERSION
    sleep 1
    aws elbv2 add-tags --resource-arns $LB_ARN --tags Key=Neo4j_Built_Version,Value=$(/usr/share/neo4j/bin/neo4j --version) --region=$TARGET_REGION
  else
    echo '- [ Failed to resolve Neo4j version from http://versions.neo4j-templates.com, using PACKAGE_VERSION=latest ] - '
    yum install -y "neo4j-enterprise"
    aws elbv2 add-tags --resource-arns $LB_ARN --tags Key=Neo4j_Built_Version,Value=$(/usr/share/neo4j/bin/neo4j --version) --region=$TARGET_REGION
  fi
fi

systemctl enable neo4j
if [[ "$PACKAGE_VERSION" == "latest" ]]; then
  PACKAGE_VERSION=$(/usr/share/neo4j/bin/neo4j --version)
fi

## 3 - Extension Config
echo " - [ Configuring extensions and security in neo4j.conf ] - "
sed -i s~#server.unmanaged_extension_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged~server.unmanaged_extension_classes=com.neo4j.bloom.server=/bloom,semantics.extension=/rdf~g /etc/neo4j/neo4j.conf
sed -i s/#dbms.security.procedures.unrestricted=my.extensions.example,my.procedures.*/dbms.security.procedures.unrestricted=gds.*,apoc.*,bloom.*/g /etc/neo4j/neo4j.conf
echo "dbms.security.http_auth_allowlist=/,/browser.*,/bloom.*" >> /etc/neo4j/neo4j.conf
echo "dbms.security.procedures.allowlist=apoc.*,gds.*,bloom.*" >> /etc/neo4j/neo4j.conf

## 4 - Neo4j Main Configuration
echo " - [ Neo4j Main (Network & Cluster Configuration ] - "
THIS_PRIVATE_IP="$(hostname -i | awk '{print $NF}')"
sed -i s/#server.default_listen_address=0.0.0.0/server.default_listen_address=0.0.0.0/g /etc/neo4j/neo4j.conf
sed -i s/#server.default_advertised_address=localhost/server.default_advertised_address="$LB_FQDN"/g /etc/neo4j/neo4j.conf
sed -i s/#server.discovery.advertised_address=:5000/server.discovery.advertised_address="$THIS_PRIVATE_IP":5000/g /etc/neo4j/neo4j.conf
sed -i s/#server.cluster.advertised_address=:6000/server.cluster.advertised_address="$THIS_PRIVATE_IP":6000/g /etc/neo4j/neo4j.conf
sed -i s/#server.cluster.raft.advertised_address=:7000/server.cluster.raft.advertised_address="$THIS_PRIVATE_IP":7000/g /etc/neo4j/neo4j.conf
sed -i s/#server.routing.advertised_address=:7688/server.routing.advertised_address="$THIS_PRIVATE_IP":7688/g /etc/neo4j/neo4j.conf
sed -i s/#server.discovery.listen_address=:5000/server.discovery.listen_address="$THIS_PRIVATE_IP":5000/g /etc/neo4j/neo4j.conf
sed -i s/#server.routing.listen_address=0.0.0.0:7688/server.routing.listen_address="$THIS_PRIVATE_IP":7688/g /etc/neo4j/neo4j.conf
sed -i s/#server.cluster.listen_address=:6000/server.cluster.listen_address="$THIS_PRIVATE_IP":6000/g /etc/neo4j/neo4j.conf
sed -i s/#server.cluster.raft.listen_address=:7000/server.cluster.raft.listen_address="$THIS_PRIVATE_IP":7000/g /etc/neo4j/neo4j.conf
sed -i s/#server.bolt.listen_address=:7687/server.bolt.listen_address="$THIS_PRIVATE_IP":7687/g /etc/neo4j/neo4j.conf
sed -i s/#server.bolt.advertised_address=:7687/server.bolt.advertised_address="$THIS_PRIVATE_IP":7687/g /etc/neo4j/neo4j.conf
neo4j-admin server memory-recommendation >> /etc/neo4j/neo4j.conf
echo "server.metrics.enabled=true" >> /etc/neo4j/neo4j.conf
echo "server.metrics.jmx.enabled=true" >> /etc/neo4j/neo4j.conf
echo "server.metrics.prefix=neo4j" >> /etc/neo4j/neo4j.conf
echo "server.metrics.filter=*" >> /etc/neo4j/neo4j.conf
echo "server.metrics.csv.interval=5s" >> /etc/neo4j/neo4j.conf
echo "dbms.routing.default_router=SERVER" >> /etc/neo4j/neo4j.conf
if [[ $NODE_COUNT == 1 ]]; then
  echo "- [ Running on a single node ] -"
else
  echo " - [ Running on multiple nodes.  Configuring membership in neo4j.conf ] - "
  sed -i s/#initial.dbms.default_primaries_count=1/initial.dbms.default_primaries_count=3/g /etc/neo4j/neo4j.conf
  sed -i s/#initial.dbms.default_secondaries_count=0/initial.dbms.default_secondaries_count=$(expr $NODE_COUNT - 3)/g /etc/neo4j/neo4j.conf
  sed -i s/#server.bolt.listen_address=:7687/server.bolt.listen_address="$THIS_PRIVATE_IP":7687/g /etc/neo4j/neo4j.conf
  echo "dbms.cluster.minimum_initial_system_primaries_count=$NODE_COUNT" >> /etc/neo4j/neo4j.conf
  sed -i s/#dbms.cluster.discovery.endpoints=localhost:5000,localhost:5001,localhost:5002/dbms.cluster.discovery.endpoints=$CORE_MEMBERS/g /etc/neo4j/neo4j.conf
fi

## Install UUID and setup indexes and constraints
echo " - [ Configuring APOC and indexes/constraints ] - "
wget https://github.com/neo4j/apoc/releases/download/5.12.0/apoc-5.12.0-core.jar -P /var/lib/neo4j/plugins
wget https://github.com/neo4j-contrib/neo4j-apoc-procedures/releases/download/5.12.0/apoc-5.12.0-extended.jar -P /var/lib/neo4j/plugins
chown neo4j:neo4j /var/lib/neo4j/plugins/apoc-5.12.0-extended.jar
chmod 755 /var/lib/neo4j/plugins/apoc-5.12.0-extended.jar
touch /etc/neo4j/apoc.conf
chown neo4j:neo4j /etc/neo4j/apoc.conf
echo 'apoc.uuid.enabled=true' >> /etc/neo4j/apoc.conf
echo 'apoc.import.file.use_neo4j_config=true' >> /etc/neo4j/apoc.conf
echo 'apoc.import.file.enabled=true' >> /etc/neo4j/apoc.conf
echo 'apoc.export.file.enabled=true' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.0=CREATE CONSTRAINT asset_identifier IF NOT EXISTS FOR (n:Asset) REQUIRE n.identifier IS UNIQUE' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.1=CREATE CONSTRAINT policy_entity_identifier IF NOT EXISTS FOR (n:PolicyEntity) REQUIRE n.identifier IS UNIQUE' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.2=CREATE CONSTRAINT result_entity_identifier IF NOT EXISTS FOR (n:ResultEntity) REQUIRE n.identifier IS UNIQUE' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.3=CREATE CONSTRAINT attribute_identifier IF NOT EXISTS FOR (a:Attribute) REQUIRE a.identifier IS UNIQUE' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.4=CALL apoc.uuid.install("Asset", {uuidProperty: "identifier", addToExistingNodes: false})' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.5=CALL apoc.uuid.install("PolicyEntity", {uuidProperty: "identifier", addToExistingNodes: false})' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.6=CALL apoc.uuid.install("ResultEntity", {uuidProperty: "identifier", addToExistingNodes: false})' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.7=CALL apoc.uuid.install("Attribute", {uuidProperty: "identifier", addToExistingNodes: false})' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.8=CREATE FULLTEXT INDEX search_index IF NOT EXISTS FOR (n:Asset|PolicyEntity) ON EACH [n.idFromProvider, n.name, n.slug, n.internalName] OPTIONS {indexConfig: {`fulltext.eventually_consistent`: true}}' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.9=CREATE INDEX iamPermission_name IF NOT EXISTS FOR (n:IAMPermission) ON (n.name)' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.10=CREATE INDEX asset_idFromProvider IF NOT EXISTS FOR (n:Asset) ON (n.idFromProvider)' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.11=CREATE INDEX control_slug FOR (c:Control) ON c.slug' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.12=CREATE INDEX procedure_slug FOR (pr:Procedure) ON pr.slug' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.13=CREATE INDEX awsAsset_package FOR (n:AWSAsset) ON (n.awsPackage)' >> /etc/neo4j/apoc.conf
echo 'apoc.initializer.neo4j.14=CREATE INDEX awsAsset_assetType FOR (n:AWSAsset) ON (n.awsAssetType)' >> /etc/neo4j/apoc.conf

## 5 - Install Graph Data Science
if [[ "$INSTALL_GDS" == true && $NODE_COUNT == 1 ]]; then
  echo " - [  Installing Graph Data Science] - "
  cp /var/lib/neo4j/products/neo4j-graph-data-science-*.jar /var/lib/neo4j/plugins
fi
if [[ $GDS_KEY != None ]]; then
  echo " - [ Writing GDS license key ] - "
  mkdir -p /etc/neo4j/licenses
  echo "$GDS_KEY" > /etc/neo4j/licenses/neo4j-gds.license
  sed -i '$a gds.enterprise.license_file=/etc/neo4j/licenses/neo4j-gds.license' /etc/neo4j/neo4j.conf
fi

## 6 - Install Bloom
if [[ $INSTALL_BLOOM == true ]]; then
  echo " - [ Installing Bloom ] - "
  cp /var/lib/neo4j/products/bloom-plugin-*.jar /var/lib/neo4j/plugins
fi
if [[ $BLOOM_KEY != None ]]; then
  echo " - [ Writing Bloom license key ] - "
  mkdir -p /etc/neo4j/licenses
  echo "$BLOOM_KEY" > /etc/neo4j/licenses/neo4j-bloom.license
  sed -i '$a dbms.bloom.license_file=/etc/neo4j/licenses/neo4j-bloom.license' /etc/neo4j/neo4j.conf
fi

## 7 - Start Neo4j
echo " - [ Starting Neo4j ] - "
service neo4j start
neo4j-admin dbms set-initial-password "$NEO4J_PASSWORD"